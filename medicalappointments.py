# -*- coding: utf-8 -*-
"""MedicalAppointments.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ayjj8_-Y2LhJZ483JtruElEpqI2GZ81q
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing libraries 

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# % matplotlib inline

"""# **Introduction**

* The dataset collects information from 100k medical appointments in Brazil and is focused on the question of whether or not patients show up for their appointment. A number of characteristics about the patient are included in each row.

***Data Dictionary***

* PatientId: patient unique ID
* AppointmentID: appointment unique ID
* Gender: Male or Female
* ScheduledDay: the day someone called or registered the appointment, this is before appointment of course
* AppointmentDay: the day of the actual appointment, when they have to visit the doctor
* Age: How old is the patient
* Neighbourhood: where the appointment takes place
* Scholarship: True of False
* Hipertension: True or False
* Diabetes: True or False
* Alcoholism: True or False
* Handcap: True or False
* SMS_received: True or False
* No-show : True or False

 *  ‘ScheduledDay’ tells us on what day the patient set up their appointment.
 *  ‘Neighborhood’ indicates the location of the hospital.
 *  ‘Scholarship’ indicates whether or not the patient is enrolled in Brasilian welfare program Bolsa Família.

The aim is to identify the factors that majorly influence patients not showing up to appointments.BUt first, Let us perform some data wrangling on it

## **Data Wrangling**
"""

#Loading the dataset
df=pd.read_csv('/content/noshowappointments.csv')
df.head()

df.tail()

df.shape

"""We can see that our dataset has **110527 rows** and **14 columns**.Let us dive deeper to see the datatypes as well as non-null values

"""

df.info()

df.dtypes

df.nunique()

"""* ScheduledDay & Appointment Day read as a string objects.
These need te be changed to datetime objects.

* PatientId reads as a float object.While performing aggregate functions it is likely this will be affected.Let us change this to a string object

"""

import datetime

#Changing the datatypes
df['ScheduledDay']=pd.to_datetime(df['ScheduledDay'])
df['AppointmentDay']=pd.to_datetime(df['AppointmentDay'])

#Confirming changes have been made
df[['ScheduledDay','AppointmentDay']].dtypes

df.dtypes

"""Now that we have datetime objects we can create columns to:
* show difference between appointment day and scheduled day .
* identify period of day an appointment was scheduled.
"""

#Creating period of day column
df['period'] = (df['ScheduledDay'].dt.hour % 24 + 4) // 4
df['period'].replace({1: 'Late Night',
                      2: 'Early Morning',
                      3: 'Morning',
                      4: 'Noon',
                      5: 'Evening',
                      6: 'Night'}, inplace=True)
df['period'].unique()

#Days between appointment day and scheduled day
df['ScheduledDay_Date'] = df.ScheduledDay.dt.normalize()
df['AppointmentDay_Date'] = df.AppointmentDay.dt.normalize()
df['Days_between']=(df['AppointmentDay_Date']-df['ScheduledDay_Date']).dt.days

print(sorted(df['Days_between'].unique()))

"""We can see negative days which indicate an appointment was scheduled after the actual appointment date which is actually wrong.Let us deep dive into the rows with negative days and drop them"""

df.query('Days_between < 0')

#Dropping rows
df.drop(index=[27033,55226,64175,71533,72362],inplace=True)

#Confirm changes have been made
df.query('Days_between < 0')

#Changing datatypes
df['PatientId'] = df['PatientId'].apply(lambda x: str(int(x)))

#Confirming changes have been made
df['PatientId'].dtype

df.describe()

"""At first glance,the minimum age shows -1 which is an outlier and should be dropped.Let us check if there are more values such as this.


"""

#Checking for outlier values in the Age column
print(sorted(df['Age'].unique()))

#Checking the row number of the outlier
df.query('Age == -1')

#Dropping outlier row in age column
df.drop(99832,inplace=True)

#Checking if row has been dropped
df.shape

df.nunique()

"""From the data dictionary,Handcap should be a boolean value but we can see it has 5 values.Let us investigate what values these are

"""

#Checking unique values

df['Handcap'].unique()

#Changing Handcap column to boolean
df['Handcap'] = np.where(df['Handcap']>0, 1, 0)

#Confirming changes have been made
df['Handcap'].unique()

"""The last column 'No-Show' says ‘No’ if the patient showed up to their appointment, and ‘Yes’ if they did not show up.This can be a little confusing.Let us rename this column to 'Showed Up' and interchange the values for clarity purposes"""

#Changing the column name and Interchanging the values

df=df.rename(columns={'No-show':'ShowedUp'})
df['ShowedUp']=df['ShowedUp'].replace({'No':'Yes','Yes':'No'})

#Confirming if the changes have been made
df.head()

"""# **Exploratory Data Analysis**

*What are the factors that majorly influence patients not showing up to appointments?*

*Univariate Analysis :Numerical Variables*
"""

cols = 3
rows = 4
num_cols = df.select_dtypes(exclude=['object','datetime64[ns, UTC]']).columns
fig = plt.figure(figsize= (20,14))
for i, col in enumerate(num_cols):
    
    ax=fig.add_subplot( rows, cols, i+1)
    
    sns.histplot(x=df[col], ax=ax)
    
fig.tight_layout()  
plt.show()

df.describe(exclude=['object','datetime64[ns, UTC]'])

"""*Univariate Analysis :Categorical Variables*"""

#Univariate analysis of categorical features
rows=3
cols=2
fig = plt.figure(figsize= (12,8))
all_categs = df.select_dtypes(include='object')
categ_cols = all_categs.columns[all_categs.nunique()<10]
for i, col in enumerate(categ_cols):
    
    ax=fig.add_subplot(rows, cols, i+1)
    
    sns.countplot(x=df[col], ax=ax)
    
    
    
fig.tight_layout()  
plt.show()

df.describe(include='object')

"""*General Property*"""

df.groupby('ShowedUp')['PatientId'].count()

df1 = df['ShowedUp'].value_counts()
plt.pie(df1, labels=df1.index, autopct="%.0f%%")
plt.title('Showed Up Stats');

"""Majority of the patients showed up for their appointments.Let us deep dive into the individual properties,starting with:

1.   Gender
"""

df.groupby('Gender')['ShowedUp'].value_counts().sort_values(ascending=False)

ax = sns.countplot(x=df['Gender'], hue=df['ShowedUp'], data=df)
ax.set_title("Showed Up stats by Gender")
plt.show()

"""Female patients seem to miss appointments more than Male patients.This can be attributed to Female patients juggling the biggest role of caregiving in most households which would be a great contributor to them missing appointments.

2. Neighbourhood
"""

df.groupby('Neighbourhood')['ShowedUp'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(16,4))
plt.xticks(rotation=90)
ax = sns.countplot(x=df['Neighbourhood'], hue=df['ShowedUp'], data=df,order=df['Neighbourhood'].value_counts().index)
ax.set_title("Showed Up stats by Neighbourhood")
plt.show()

"""'JARDIM CAMBURI' & 'MARIA ORTIZ' Neighbourhood seem to be leading in both maximum number of patients who showed up and those that did not show up.

3. Age
"""

df.groupby('Age')['ShowedUp'].value_counts().sort_values(ascending=False)

#Binning ages into groups
bins = [0,20,40,60,80]
labels = ['0-19', '20-39', '40-59', '80+']
df['Age_cat']=pd.cut(x=df['Age'],bins=bins,labels=labels)
df['Age_cat']



df1=df.query('ShowedUp == "No"')
df1.head()

plt.figure(figsize=(16,4))
plt.xticks(rotation=90)
ax = sns.countplot(x=df['Age_cat'], hue=df['ShowedUp'], data=df,order=df['Age_cat'].value_counts().index)
ax.set_title("Showed Up stats by Age")
plt.show()

"""Ages between 0 and 39 miss appointments more than above 40 years

4. Scholarship
"""

df.groupby('Scholarship')['ShowedUp'].value_counts().sort_values(ascending=False)

ax = sns.countplot(x=df['Scholarship'], hue=df['ShowedUp'], data=df)
ax.set_title("Showed Up stats by Scholarship")
plt.show()

"""Those that miss appointments do not have Scholarship.This could mean,they are unable to afford the visit to the hospital due to poverty conditions.

5. Hipertension
"""

df.groupby('Hipertension')['ShowedUp'].value_counts().sort_values(ascending=False)

ax = sns.countplot(x=df['Hipertension'], hue=df['ShowedUp'], data=df)
ax.set_title("Showed Up stats by Hipertension")
plt.show()

"""Patients without Hipertension are unlikely to miss appointments as Hipertension is life threatening and may require extra attention and care.

6. Diabetes
"""

df.groupby('Diabetes')['ShowedUp'].value_counts().sort_values(ascending=False)

ax = sns.countplot(x=df['Diabetes'], hue=df['ShowedUp'], data=df)
ax.set_title("Showed Up stats by Diabetes")
plt.show()

"""Patients without diabetes are more likely to miss appointments as the level of urgency and life threatening potential is completely on different scales

7. Alcoholism
"""

df.groupby('Alcoholism')['ShowedUp'].value_counts().sort_values(ascending=False)

ax = sns.countplot(x=df['Alcoholism'], hue=df['ShowedUp'], data=df)
ax.set_title("Showed Up stats by Alcoholism")
plt.show()

"""Non alcoholic patients are likely to miss appointments more than alcoholic patients

---

8. Handcap
"""

df.groupby('Handcap')['ShowedUp'].value_counts().sort_values(ascending=False)

ax = sns.countplot(x=df['Handcap'], hue=df['ShowedUp'], data=df)
ax.set_title("Showed Up stats by Handcap")
plt.show()

"""Non handcap patients miss appointments more than Handcap patients

9. Days_between
"""

print(sorted(df['Days_between'].unique()))

#Placing into categories days between the scheduled day and appointment day
bins= [0,7,14,30,90,180]
labels = ['Same Day','Week','Fortnight','Month','Quarter']
df['Days_between_group'] = pd.cut(df['Days_between'], bins=bins, labels=labels, right=False)
print (df['Days_between_group'])

df.groupby('Days_between_group')['ShowedUp'].value_counts().sort_values(ascending=False)

ax = sns.countplot(x=df['Days_between_group'], hue=df['ShowedUp'], data=df,order=df['Days_between_group'].value_counts().index)
ax.set_title("Showed Up stats by Days_between")
plt.show()

"""Appointments scheduled on the same day and two weeks before are mostly missed than those stretching beyond a month

10. Period
"""

df.groupby('period')['ShowedUp'].value_counts().sort_values(ascending=False)

ax = sns.countplot(x=df['period'], hue=df['ShowedUp'], data=df,order=df['period'].value_counts().index)
ax.set_title("Showed Up stats by period")
plt.show()

"""Appointments scheduled between morning hours and noon are missed more than those scheduled at night.This could be contributed to the level of urgency decreasing
as period of the day lapses from noon to the actual appointment date.

11. SMS_received
"""

df.groupby('SMS_received')['ShowedUp'].value_counts().sort_values(ascending=False)

ax = sns.countplot(x=df['SMS_received'], hue=df['ShowedUp'], data=df)
ax.set_title("Showed Up stats by SMS_received")
plt.show()

"""Patients who did not receive notifications of their appointments miss appointments more than those that receive at least one notification

"""



"""All the above features contribute to patients missing appointments.However,to identify the most important feautures,we would have to find the correlation between variables.Let us do that using a correlation matrix"""

#Label encoding the showed up column
df['ShowedUp_encoded']=df['ShowedUp'].replace({'No':0,'Yes':1})

df.corr()

"""Summary :*What are the factors that majorly influence patients not showing up to appointments?*

* The top variables that are positively correlated with showing up to an appointment are ***Age ,Hipertension , Diabetes , SMS_received *** respectively.

* Ages between 0 and 39 equally miss appointments as well as show up to appointments.These ages are unpredictable in determining for sure if a patient will miss an appointment.

* Patients with Hipertension and Diabetes miss appointments more than those with other diseases.

* Patients who did not receive notifications of their appointments miss appointments more than those that receive at least one notification

* A limitation of this dataset is the inability to know what period of day an appointment was scheduled for.This could play a major part in establishing if a patient missed an appointment because it was too early or too late.


"""